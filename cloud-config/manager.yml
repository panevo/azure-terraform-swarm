#cloud-config

write_files:
  - path: /root/swarm-helper.py
    permissions: 0755
    content: |
      #!/usr/bin/env python3
      from bottle import get, run, abort
      from subprocess import check_output
      from socket import gethostname
      from signal import signal, setitimer, ITIMER_REAL, SIGALRM

      def cleanup(signum, frame):
          try:
              nodes = check_output('docker node ls', shell=True).strip()
              down = map(lambda x: x.split()[1], filter(lambda x: 'Down' in x, nodes.split("\n")))
              for node in down_nodes:
                  check_output('docker node rm ' + node, shell=True)
          except:
              pass

      @get("/join/worker")
      def token_worker():
          return check_output('docker swarm join-token -q worker', shell=True).strip()

      @get("/join/manager")
      def token_manager():
          return check_output('docker swarm join-token -q manager', shell=True).strip()

      @get("/drain/<hostname>")
      def drain(hostname):
          try:
              return check_output('docker node update --availability drain ' + hostname, shell=True).strip()
          except:
              abort(404, "node not found")

      @get("/activate/<hostname>")
      def activate(hostname):
          try:
              return check_output('docker node update --availability active ' + hostname, shell=True).strip()
          except:
              abort(404, "node not found")

      if 'manager0' in gethostname():
          try:
              check_output('docker swarm init', shell=True)
          except:
              pass
          signal(SIGALRM, cleanup)
          setitimer(ITIMER_REAL, 10, 10)
          run(port=1337,host='0.0.0.0')
  - path: /etc/systemd/system/swarm-helper.service
    permissions: 0444
    content: |
      [Unit]
      Description=Swarm Helper
      DefaultDependencies=no
      After=multi-user.target docker.service containerd.service
      [Service]
      Type=oneshot
      ExecStart=/root/swarm-helper.py
      [Install]
      WantedBy=multi-user.target
  - path: /root/join-swarm.sh
    permissions: 0755
    content: |
      #!/bin/bash
      if [ $(hostname) != "manager0" ]; then
        # get the swarm manager token
        TOKEN=$(wget -nv -q -O - --retry-connrefused --waitretry 5 http://manager0:1337/join/manager)
        docker swarm join --token $TOKEN manager0:2377
      fi
  - path: /root/leave-swarm.sh
    permissions: 0755
    content: |
      #!/bin/bash
      HOSTNAME=`hostname`
      # signal the master to drain services from our node
      wget -nv -q -O - --retry-connrefused 20 --waitretry 5 http://manager0:1337/drain/$HOSTNAME
      # docker swarm leave
  - path: /etc/systemd/system/swarm-join.service
    permissions: 0444
    content: |
      [Unit]
      Description=Join Swarm
      DefaultDependencies=no
      After=multi-user.target docker.service containerd.service
      [Service]
      Type=oneshot
      ExecStart=/root/join-swarm.sh
      [Install]
      WantedBy=multi-user.target
  - path: /etc/waagent.conf
    permissions: 0444
    content: |
      ResourceDisk.Format=y
      ResourceDisk.Filesystem=ext4
      ResourceDisk.MountPoint=/mnt/resource
      ResourceDisk.EnableSwap=y
      ResourceDisk.SwapSizeMB=2048
    # Enable docker monitoring
  - path: /root/daemon.json
    permissions: 0444
    content: |
      {
          "metrics-addr": "0.0.0.0:9323"
      }
  - path: /etc/opt/microsoft/mdatp/managed/mdatp_managed.json
    permissions: 0444
    content: |
      {
          "antivirusEngine": {
              "enforcementLevel": "real_time",
              "scanAfterDefinitionUpdate": true,
              "scanArchives": true,
              "maximumOnDemandScanThreads": 1,
              "exclusionsMergePolicy": "merge",
              "exclusions": [
                  {
                      "$type": "excludedPath",
                      "isDirectory": false,
                      "path": "/var/log/system.log"
                  },
                  {
                      "$type": "excludedPath",
                      "isDirectory": true,
                      "path": "/proc"
                  },
                  {
                      "$type": "excludedPath",
                      "isDirectory": true,
                      "path": "/sys"
                  },
                  {
                      "$type": "excludedPath",
                      "isDirectory": true,
                      "path": "/dev"
                  },
                  {
                      "$type": "excludedFileExtension",
                      "extension": ""
                  },
                  {
                      "$type": "excludedFileName",
                      "name": ""
                  }
              ],
              "disallowedThreatActions": [
                  "allow",
                  "restore"
              ],
              "threatTypeSettingsMergePolicy": "merge",
              "threatTypeSettings": [
                  {
                      "key": "potentially_unwanted_application",
                      "value": "audit"
                  },
                  {
                      "key": "archive_bomb",
                      "value": "audit"
                  }
              ]
          },
          "cloudService": {
              "enabled": true,
              "diagnosticLevel": "optional",
              "automaticSampleSubmissionConsent": "safe",
              "automaticDefinitionUpdateEnabled": true
          }
      }

# setup the datadisk
disk_setup:
  /dev/disk/azure/scsi1/lun0:
    table_type: gpt
    layout: true
    overwrite: false

fs_setup:
  - device: /dev/disk/azure/scsi1/lun0
    partition: 1
    filesystem: ext4

mounts:
  # Mount the Azure File Share to /srv/
  - - //${storage_account_name}.file.core.windows.net/config
    - /srv/config
    - cifs
    - vers=3.0,username=${storage_account_name},password=${storage_account_key},dir_mode=0777,file_mode=0777,uid=1000,gid=1000,noperm,,iocharset=utf8
  - - //${storage_account_name}.file.core.windows.net/data
    - /srv/data
    - cifs
    - vers=3.0,username=${storage_account_name},password=${storage_account_key},dir_mode=0777,file_mode=0777,uid=1000,gid=1000,noperm,,iocharset=utf8
  - - //${storage_account_name}.file.core.windows.net/data
    - /srv/protected
    - cifs
    - vers=3.0,username=${storage_account_name},password=${storage_account_key},dir_mode=0700,file_mode=0600,uid=1000,gid=1000,noperm,,iocharset=utf8
  # mount the datadisk to /data
  - [
      "/dev/disk/azure/scsi1/lun0-part1",
      "/datadisk",
      auto,
      "defaults,noexec,nofail",
    ]
package_update: true
package_upgrade: true
packages:
  - ntp
  - tmux
  - htop
  - vim
  - fail2ban
  - curl
  - apt-transport-https
  - ca-certificates
  - python3-pip

runcmd:
  # Follow install instructions for Docker
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  - chmod a+r /etc/apt/keyrings/docker.asc
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update -y
  - apt-get install -y docker-ce=5:25.0.3-1~ubuntu.22.04~jammy docker-ce-cli=5:25.0.3-1~ubuntu.22.04~jammy containerd.io docker-buildx-plugin docker-compose-plugin
  - usermod -G docker ${username}
  - cp /root/daemon.json /etc/docker
  # prevent docker update
  - apt-mark hold docker-ce docker-ce-cli containerd.io
  # enable docker
  # - systemctl enable docker.service
  # - systemctl enable containerd.service
  # configure python
  - python3 -m pip install bottle==0.12.25
  # start the swarm helper server
  - systemctl enable swarm-helper
  - systemctl start swarm-helper
  - systemctl enable swarm-join
  - systemctl start swarm-join
  # deploy and configure Azure Defender for Endpoint
  # - curl https://raw.githubusercontent.com/microsoft/mdatp-xplat/master/linux/installation/mde_installer.sh > https://raw.githubusercontent.com/microsoft/mdatp-xplat/master/linux/installation/mde_installer.sh
  # - chmod +x /root/mde_installer.sh
  # - /root/mde_installer.sh
  # # Configure daily quick scan at 8 am UTC
  # - (crontab -l 2>/dev/null; echo '0 8 * * * mdatp scan quick') | crontab -
  # # Configure weekly full scan at 6 am UTC on Sunday
  # - (crontab -l 2>/dev/null; echo '0 6 * * 0 mdatp scan quick') | crontab -
  # # Configure monthly updates of Azure Defender for Endpoint
  # - (crontab -l 2>/dev/null; echo '0 0 1 * * apt-get install --only-upgrade mdatp') | crontab -
