#cloud-config

write_files:
  - path: /root/swarm-helper.py
    permissions: 0755
    content: |
      #!/usr/bin/env python3
      from bottle import get, run, abort
      from subprocess import check_output
      from socket import gethostname
      from signal import signal, setitimer, ITIMER_REAL, SIGALRM

      def cleanup(signum, frame):
          try:
              nodes = check_output('docker node ls --format "{{.ID}} {{.Hostname}} {{.Status}}"', shell=True).decode().strip().split('\n')
              down_nodes = [node.split('')[1] for node in nodes if 'down' in node.lower()]
              for node in down_nodes:
                  check_output('docker node rm ' + node, shell=True)
          except:
              pass

      @get("/join/worker")
      def token_worker():
          return check_output('docker swarm join-token -q worker', shell=True).strip()

      @get("/join/manager")
      def token_manager():
          return check_output('docker swarm join-token -q manager', shell=True).strip()

      @get("/drain/<hostname>")
      def drain(hostname):
          try:
              return check_output('docker node update --availability drain ' + hostname, shell=True).strip()
          except:
              abort(404, "node not found")

      if 'manager0' in gethostname():
          try:
              check_output('docker swarm init', shell=True)
          except:
              pass
          signal(SIGALRM, cleanup)
          setitimer(ITIMER_REAL, 10, 10)
          run(port=1337,host='0.0.0.0')
  - path: /etc/systemd/system/swarm-helper.service
    permissions: 0444
    content: |
      [Unit]
      Description=Swarm Helper
      DefaultDependencies=no
      After=multi-user.target
      [Service]
      Type=oneshot
      ExecStart=/root/swarm-helper.py
      [Install]
      WantedBy=multi-user.target
  - path: /etc/waagent.conf
    permissions: 0444
    content: |
      ResourceDisk.Format=y
      ResourceDisk.Filesystem=ext4
      ResourceDisk.MountPoint=/mnt/resource
      ResourceDisk.EnableSwap=y
      ResourceDisk.SwapSizeMB=2048
    # Enable docker monitoring
  - path: /root/daemon.json
    permissions: 0444
    content: |
      {
          "metrics-addr": "0.0.0.0:9323",
      }

# mounts:
#   - - //${STORAGE_ACCOUNT_NAME}.file.core.windows.net/config
#       - /srv/config
#       - cifs
#       - vers=3.0,username=${STORAGE_ACCOUNT_NAME},password=${STORAGE_ACCOUNT_KEY},dir_mode=0777,file_mode=0777,uid=1000,gid=1000,noperm,,iocharset=utf8
#     - - //${STORAGE_ACCOUNT_NAME}.file.core.windows.net/data
#       - /srv/data
#       - cifs
#       - vers=3.0,username=${STORAGE_ACCOUNT_NAME},password=${STORAGE_ACCOUNT_KEY},dir_mode=0777,file_mode=0777,uid=1000,gid=1000,noperm,,iocharset=utf8
#     - - //${STORAGE_ACCOUNT_NAME}.file.core.windows.net/protected
#       - /srv/protected
#       - cifs
#       - vers=3.0,username=${STORAGE_ACCOUNT_NAME},password=${STORAGE_ACCOUNT_KEY},dir_mode=0600,file_mode=0600,uid=1000,gid=1000,noperm,,iocharset=utf8
package_update: true
package_upgrade: true
packages:
  - ntp
  - docker-ce
  - tmux
  - htop
  - vim
  - fail2ban
  - curl
  - apt-transport-https
  - ca-certificates
  - curl
  - python3-pip

runcmd:
  #- mkdir -p /srv/data /srv/config /srv/protected
  #- mount -a
  # Follow install instructions for Docker
  - chmod a+r /etc/apt/keyrings/docker.asc
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update -y
  - apt-get install -y docker-ce=5:25.0.3-1~ubuntu.22.04~jammy docker-ce-cli=5:25.0.3-1~ubuntu.22.04~jammy containerd.io docker-buildx-plugin docker-compose-plugin
  - usermod -G docker cluster
  - cp /root/daemon.json /etc/docker
  # enable docker
  - systemctl enable docker
  - systemctl start docker
  # configure python
  - python3 -m pip install bottle==0.12.25
  # start the swarm helper server
  - systemctl enable swarm-helper
  - systemctl start swarm-helper
  #- reboot
