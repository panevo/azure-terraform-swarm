#cloud-config

write_files:
  - path: /root/join-swarm.sh
    permissions: 0755
    content: |
      #!/bin/bash
      # make sure there's no disk state that points to an existing swarm
      docker swarm leave
      # get the swarm worker token
      TOKEN=$(wget -nv -q -O - --retry-connrefused --tries 0 --waitretry 5 http://manager0:1337/join/worker)
      docker swarm join --token $TOKEN manager0:2377
  - path: /root/leave-swarm.sh
    permissions: 0755
    content: |
      #!/bin/bash
      HOSTNAME=`hostname`
      # signal the master to drain services from our node
      wget -nv -q -O - --retry-connrefused --tries 0 --waitretry 5 http://manager0:1337/drain/$HOSTNAME
      docker swarm leave
  - path: /etc/systemd/system/swarm-join.service
    permissions: 0444
    content: |
      [Unit]
      Description=Join Swarm
      DefaultDependencies=no
      After=multi-user.target
      [Service]
      Type=oneshot
      ExecStart=/root/join-swarm.sh
      [Install]
      WantedBy=multi-user.target
  - path: /etc/systemd/system/swarm-leave.service
    permissions: 0444
    content: |
      [Unit]
      Description=Leave Swarm
      DefaultDependencies=no
      Before=shutdown.target reboot.target halt.target
      [Service]
      Type=oneshot
      ExecStart=/root/leave-swarm.sh
      [Install]
      WantedBy=halt.target reboot.target shutdown.target
  - path: /etc/waagent.conf
    permissions: 0444
    content: |
      ResourceDisk.Format=y
      ResourceDisk.Filesystem=ext4
      ResourceDisk.MountPoint=/mnt/resource
      ResourceDisk.EnableSwap=y
      ResourceDisk.SwapSizeMB=2048
  # Enable docker monitoring
  - path: /root/daemon.json
    permissions: 0444
    content: |
      {
          "metrics-addr": "0.0.0.0:9323",
      }

mounts:
  - - //${storage_account_name}.file.core.windows.net/config
    - /srv/config
    - cifs
    - vers=3.0,username=${storage_account_name},password=${storage_account_key},dir_mode=0700,file_mode=0600,uid=1000,gid=1000,noperm,,iocharset=utf8
  - - //${storage_account_name}.file.core.windows.net/data
    - /srv/data
    - cifs
    - vers=3.0,username=${storage_account_name},password=${storage_account_key},dir_mode=0700,file_mode=0600,uid=1000,gid=1000,noperm,,iocharset=utf8
  - - //${storage_account_name}.file.core.windows.net/data
    - /srv/protected
    - cifs
    - vers=3.0,username=${storage_account_name},password=${storage_account_key},dir_mode=0700,file_mode=0600,uid=1000,gid=1000,noperm,,iocharset=utf8

package_update: true
package_upgrade: true

packages:
  - ntp
  - fail2ban
  - curl
  - apt-transport-https
  - ca-certificates

runcmd:
  # Follow install instructions for Docker
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  - chmod a+r /etc/apt/keyrings/docker.asc
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update -y
  - apt-get install -y docker-ce=5:25.0.3-1~ubuntu.22.04~jammy docker-ce-cli=5:25.0.3-1~ubuntu.22.04~jammy containerd.io docker-buildx-plugin docker-compose-plugin
  - usermod -G docker ${username}
  - cp /root/daemon.json /etc/docker
  # create the data folders on the datadisk
  - mkdir -p /datadisk/faust /datadisk/prometheus /datadisk/grafana
  - chown -R ${username}:${username} /datadisk/faust /datadisk/prometheus /datadisk/grafana
  # enable docker and join cluster
  - systemctl enable docker
  - systemctl enable swarm-join
  - systemctl enable swarm-leave
  - systemctl start docker
  - systemctl start swarm-leave
  - systemctl start swarm-join
