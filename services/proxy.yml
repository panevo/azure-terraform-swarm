version: "3.8"

services:
  # this custom haproxy allows us to move traefik to worker nodes
  # while this container listens on managers and only allows
  # traefik to connect, read-only, to limited docker api calls
  # https://github.com/Tecnativa/docker-socket-proxy
  socket-proxy:
    image: tecnativa/docker-socket-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      SERVICES: 1
      TASKS: 1
      NETWORKS: 1
      SWARM: 1
    networks:
      - traefik-docker
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        order: start-first
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 50
      resources:
        limits:
          cpus: "0.20"
          memory: 64M
    healthcheck:
      test: wget --spider http://localhost:2375/version || exit 1
      interval: "20s"
      timeout: "5s"
      retries: 3
      start_period: "20s"

  traefik:
    image: "traefik:v2.5.3"
    command:
      - --log.level=debug
      - --accesslog
      - --accesslog.format=json
      - --providers.docker
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.swarmMode
      - --providers.docker.network=proxy
      - --providers.docker.watch
      - --providers.docker.exposedbydefault=false
      - --api
      # General HTTP endpoint
      - --entryPoints.web.address=:80
      # Enable Ping healthcheck
      - --ping
      - --ping.entrypoint=ping
      - --entrypoints.ping.address=:8080
    ports:
      - 80:80
      - 443:443
      # Ping healthcheck available on port 8080
      - 8080:8080
    networks:
      - proxy
      - traefik-docker
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    healthcheck:
      test: traefik healthcheck --ping
      interval: "20s"
      timeout: "5s"
      retries: 3
      start_period: "30s"
    deploy:
      mode: global
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        delay: 10s
        order: stop-first
        parallelism: 1
      rollback_config:
        parallelism: 0
        order: stop-first
      labels:
        traefik.enable: "true"
        traefik.http.routers.api.rule: Host(`traefik2.iotorq-lean.com`)
        traefik.http.routers.api.entryPoints: web
        traefik.http.routers.api.service: api@internal
        traefik.http.services.dummy.loadbalancer.server.port: 4242

networks:
  proxy:
    driver: overlay
    name: proxy
  traefik-docker:
    name: traefik-docker
    driver: overlay
